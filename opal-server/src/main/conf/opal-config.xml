<org.obiba.opal.core.cfg.OpalConfiguration>
  
  <!-- Configure the path which will be the root of the Virtual File System used by Opal  -->
  <fileSystemRoot>file://path/to/your/opal-filesystem</fileSystemRoot>

  <functionalUnits>
    <org.obiba.opal.core.unit.FunctionalUnit>
	  <name>my-unit</name>
	  <keyVariableName>my-key</keyVariableName>
      <!--
        Unique identifier selection clause.
        If not specified variables with an "identifier" attribute set to "true" will be chosen as unique identifiers. 
        If a select clause is specified the default behaviour is overridden with the contents of the select clause.
        In the example below the variable with the name "BoneDensity.InstrumentRun.Contraindication.code" will be
        a unique identifier along will all the variables that contain an "identifier" attribute set to "true". Here
        the select clause reproduces the default behaviour and marks one extra variable by name to be an identifier.
      -->
      <!--
      <select class="org.obiba.magma.js.views.JavascriptClause">
        <script>name().matches(/BoneDensity.InstrumentRun.Contraindication.code/).or(attribute('identifier').isNull().not().and(attribute('identifier').matches(/true/)))</script>
      </select>
      -->   
	</org.obiba.opal.core.unit.FunctionalUnit>
  </functionalUnits>

  <magmaEngineFactory>
  
    <extensions>
      <org.obiba.magma.js.MagmaJsExtension />
      <org.obiba.magma.xstream.MagmaXStreamExtension />
    </extensions>

    <factories>

      <!--
        Configure available datasources in this section. Opal requires at least two datasources: one for the Participant
        keys, one for the Participant Data.
      -->

      <!-- Two types of datasources can be configured here : Hibernate and JDBC -->

      <!-- Opal keys storage -->
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>opal-keys</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>keySessionFactory</beanName>
        </sessionFactoryProvider>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>

      <!-- Opal data storage -->
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>opal-data</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>opalSessionFactory</beanName>
        </sessionFactoryProvider>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>

      <!-- An example JDBC Datasource configuration -->
      <!--
      <org.obiba.magma.datasource.jdbc.JdbcDatasourceFactory>
        <name>sql-datasource</name>

        <jdbcProperties>
          <property name="driverClassName" value="com.mysql.jdbc.Driver" />
          <property name="url" value="jdbc:mysql://localhost:3306/opal" />
          <property name="username" value="theUser" />
          <property name="password" value="theirPassword" />
        </jdbcProperties>

        <settings>
          <defaultEntityType>Participant</defaultEntityType>
        </settings>
      </org.obiba.magma.datasource.jdbc.JdbcDatasourceFactory>
      -->

      <!--
        Creating views. Views can be added to any datasource, see the example below. Note that views are not
        materialised. They're attached to a datasource, but the data is not stored within that datasource.
      -->
      
      <!-- 
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>a-datasource-with-views</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>opalSessionFactory</beanName>
        </sessionFactoryProvider>

        <transformer class="org.obiba.magma.views.support.ViewAwareDatasourceTransformer">
          <views>
            <org.obiba.magma.views.View>
            -->
              <!-- Name the view. This cannot be the name of an existing table in the underlying datasource
              <name>Recruitment</name>
              -->
              <!-- Select clause. This selects the variables from the table referenced by the From clause below.
              <select class="org.obiba.magma.js.views.JavascriptClause">
                <script>name().matches(/Admin.Participant.*/, /Admin.Interview.*/)</script>
              </select>
              -->
              <!-- From clause. This is the table where the variables and value sets come from.
              <from class="org.obiba.magma.support.ValueTableReference">
                <reference>opal-data.Participants</reference>
              </from>
              -->
              <!--  Where clause. This allows choosing which entities are included in the view.
              <where class="org.obiba.magma.js.views.JavascriptClause">
                <script>$('Admin.Interview.status').any('COMPLETE')</script>
              </where>
            </org.obiba.magma.views.View>
            -->
            
            <!--
            <org.obiba.magma.views.View>
              <name>BoneDensityStage</name>
              -->
              <!-- Selects variables based on an attribute's value
              <select class="org.obiba.magma.js.views.JavascriptClause">
                <script>attribute('stage').any('BoneDensity')</script>
              </select>
              <from class="org.obiba.magma.support.ValueTableReference">
                <reference>opal-data.Participants</reference>
              </from>
            </org.obiba.magma.views.View>
            -->
          <!--
          </views>
        </transformer>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
      -->
      
      <!-- An example Derived Variables View configuration -->
      <!--
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>derived-factory</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>opalSessionFactory</beanName>
        </sessionFactoryProvider>
        <transformer class="org.obiba.magma.views.support.ViewAwareDatasourceTransformer">
          <name>derived-views</name>
          <views>
            <view class="org.obiba.magma.views.View">
              <name>DerivedView</name>
              <variables class="org.obiba.magma.js.views.VariablesClause">
                <variables>

                  <variable name="GENERIC_128" valueType="integer" entityType="Participant">
                    <attributes>
                      <attribute name="label" valueType="text" locale="en">Appointment Year</attribute>
                      <attribute name="URI" valueType="text">http://www.datashaper.org/owl/2009/10/generic.owl#GENERIC_128</attribute>
                      <attribute name="script" valueType="text">$('Admin.Participant.appointmentDate').year()</attribute>
                    </attributes>
                  </variable>


                  <variable name="GENERIC_GENDER" valueType="text" entityType="Participant">
                    <attributes>
                      <attribute name="label" valueType="text" locale="en">Gender</attribute>
                      <attribute name="URI" valueType="text">http://www.datashaper.org/owl/2009/10/generic.owl#GENERIC_GENDER</attribute>
                      <attribute name="script" valueType="text">$('Admin.Participant.gender')</attribute>
                    </attributes>
                  </variable>

                  <variable name="DOUBLE_YEAR" valueType="integer" entityType="Participant">
                    <attributes>
                      <attribute name="label" valueType="text" locale="en">Double Year</attribute>
                      <attribute name="URI" valueType="text">http://www.datashaper.org/owl/2009/10/generic.owl#BIG_YEAR</attribute>
                      <attribute name="script" valueType="text">$('Admin.Participant.birthYear').plus($('Admin.Participant.birthYear'))</attribute>
                    </attributes>
                  </variable>

                  <variable name="GENERIC_BIRTH_YEAR" valueType="integer" entityType="Participant">
                    <attributes>
                      <attribute name="sameAs" valueType="text">Admin.Participant.birthYear</attribute>
                    </attributes>
                  </variable>


                  <variable name="AGE_AT_APPOINTMENT" valueType="integer" entityType="Participant">
                    <attributes>
                      <attribute name="sameAs" valueType="text">Admin.Participant.birthYear</attribute>
                      <attribute name="script" valueType="text">$('Admin.Participant.appointmentDate').year().minus($('Admin.Participant.birthYear'))</attribute>
                    </attributes>
                  </variable>

                  <variable name="AGE_CATEGORY_WITH_ELSE" valueType="integer" entityType="Participant">
                    <attributes>
                      <attribute name="script" valueType="text">
<![CDATA[
function ageCategory() {
    var age = $('Admin.Participant.appointmentDate').year().minus($('Admin.Participant.birthYear'));
    if(age.value() < 30) {
        return age.plus(age);
    } else {
        return age.plus(age).plus(age);
    }
}
ageCategory();
]]>
                      </attribute>
                    </attributes>
                  </variable>


                  <variable name="GENDER_COMMENT" valueType="text" entityType="Participant">
                    <attributes>
                      <attribute name="script" valueType="text">
<![CDATA[
log('gender {}', $('Admin.Participant.gender'));
function genderComment() {
   switch($('Admin.Participant.gender').value) {
      case "MALE":
         return $('Admin.Participant.gender').concat(": The participant is male.");
      case "FEMALE":
         return $('Admin.Participant.gender').concat(": The participant is female.");
      default:
         return $('Admin.Participant.gender').concat(": The participant gender is unexpected.");
   }
}
log('genderComment() {}', genderComment());
genderComment();
]]>
                      </attribute>
                    </attributes>
                  </variable>

                </variables>
              </variables>
              <from class="org.obiba.magma.support.ValueTableReference">
                <reference>opal-data.Participants</reference>
              </from>
            </view>
          </views>
        </transformer>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
      -->
      
    </factories>
  </magmaEngineFactory>
</org.obiba.opal.core.cfg.OpalConfiguration>