<org.obiba.opal.core.cfg.OpalConfiguration>
  
  <!-- Configure the path which will be the root of the Virtual File System used by Opal  -->
  <fileSystemRoot>file://path/to/your/opal-filesystem</fileSystemRoot>

  <functionalUnits>
    <org.obiba.opal.core.unit.FunctionalUnit>
	  <name>my-unit</name>
	  <keyVariableName>my-key</keyVariableName>
	</org.obiba.opal.core.unit.FunctionalUnit>
  </functionalUnits>

  <magmaEngineFactory>
  
    <extensions>
      <org.obiba.magma.js.MagmaJsExtension />
      <org.obiba.magma.xstream.MagmaXStreamExtension />
    </extensions>

    <factories>

      <!--
        Configure available datasources in this section. Opal requires at least two datasources: one for the Participant
        keys, one for the Participant Data.
      -->

      <!-- Two types of datasources can be configured here : Hibernate and JDBC -->

      <!-- Opal keys storage -->
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>opal-keys</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>keySessionFactory</beanName>
        </sessionFactoryProvider>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>

      <!-- Opal data storage -->
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>opal-data</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>opalSessionFactory</beanName>
        </sessionFactoryProvider>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>

      <!-- An example JDBC Datasource configuration -->
      <!--
      <org.obiba.magma.datasource.jdbc.JdbcDatasourceFactory>
        <name>sql-datasource</name>

        <jdbcProperties>
          <property name="driverClassName" value="com.mysql.jdbc.Driver" />
          <property name="url" value="jdbc:mysql://localhost:3306/opal" />
          <property name="username" value="theUser" />
          <property name="password" value="theirPassword" />
        </jdbcProperties>

        <settings>
          <defaultEntityType>Participant</defaultEntityType>
        </settings>
      </org.obiba.magma.datasource.jdbc.JdbcDatasourceFactory>
      -->

      <!--
        Creating views. Views can be added to any datasource, see the example below. Note that views are not
        materialised. They're attached to a datasource, but the data is not stored within that datasource.
      -->
      
      <!-- 
      <org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
        <name>a-datasource-with-views</name>
        <sessionFactoryProvider class="org.obiba.magma.datasource.hibernate.support.SpringBeanSessionFactoryProvider">
          <beanName>opalSessionFactory</beanName>
        </sessionFactoryProvider>

        <transformer class="org.obiba.magma.views.support.ViewAwareDatasourceTransformer">
          <views>
            <org.obiba.magma.views.View>
            -->
              <!-- Name the view. This cannot be the name of an existing table in the underlying datasource
              <name>Recruitment</name>
              -->
              <!-- Select clause. This selects the variables from the table referenced by the From clause below.
              <select class="org.obiba.magma.js.views.JavascriptClause">
                <script>name().matches(/Admin.Participant.*/, /Admin.Interview.*/)</script>
              </select>
              -->
              <!-- From clause. This is the table where the variables and value sets come from.
              <from class="org.obiba.magma.support.ValueTableReference">
                <reference>opal-data.Participants</reference>
              </from>
              -->
              <!--  Where clause. This allows choosing which entities are included in the view.
              <where class="org.obiba.magma.js.views.JavascriptClause">
                <script>$('Admin.Interview.status').any('COMPLETE')</script>
              </where>
            </org.obiba.magma.views.View>
            -->
            
            <!--
            <org.obiba.magma.views.View>
              <name>BoneDensityStage</name>
              -->
              <!-- Selects variables based on an attribute's value
              <select class="org.obiba.magma.js.views.JavascriptClause">
                <script>attribute('stage').any('BoneDensity')</script>
              </select>
              <from class="org.obiba.magma.support.ValueTableReference">
                <reference>opal-data.Participants</reference>
              </from>
            </org.obiba.magma.views.View>
            -->
          <!--
          </views>
        </transformer>
      </org.obiba.magma.datasource.hibernate.support.HibernateDatasourceFactory>
      -->
    </factories>
  </magmaEngineFactory>
</org.obiba.opal.core.cfg.OpalConfiguration>