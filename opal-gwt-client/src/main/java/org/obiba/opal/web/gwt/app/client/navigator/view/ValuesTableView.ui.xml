<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
    xmlns:g="urn:import:com.google.gwt.user.client.ui"
    xmlns:c="urn:import:com.google.gwt.user.cellview.client"
    xmlns:o="urn:import:org.obiba.opal.web.gwt.app.client.workbench.view"
    xmlns:b="urn:import:com.github.gwtbootstrap.client.ui"
    ui:generateFormat='com.google.gwt.i18n.rebind.format.PropertiesFormat'
    ui:generateKeys="com.google.gwt.i18n.rebind.keygen.MD5KeyGenerator"
    ui:generateLocales="default">

  <g:FlowPanel ui:field="valuesPanel">
    <g:InlineLabel ui:field="noValues">
      <ui:msg description="No Values label">No Values</ui:msg>
    </g:InlineLabel>
    <g:PopupPanel ui:field="navigationPopup" autoHideEnabled="true" styleName="gwt-MenuBarPopup"></g:PopupPanel>

    <g:FlowPanel ui:field="searchPanel">
      <b:InputAddOn prependIcon="SEARCH">
        <b:TextBox ui:field="searchBox" searchQuery="true" placeholder="search for an identifier..."/>
      </b:InputAddOn>

    </g:FlowPanel>

    <g:DisclosurePanel ui:field="addPanel" addStyleNames="left-aligned">
      <g:customHeader>
        <g:FlowPanel>
          <g:InlineLabel>
            <ui:msg description="Display Options label">Display options</ui:msg>
          </g:InlineLabel>
          <g:Image ui:field="refreshPending" url="image/loading.gif" addStyleNames="small-indent"/>
        </g:FlowPanel>
      </g:customHeader>

      <g:Grid>
        <g:row>
          <g:customCell styleName="top-aligned">
            <g:FlowPanel styleName="input block">
              <g:Label addStyleNames="key">
                <ui:msg description="Filter Variables label">Variables filter</ui:msg>
              </g:Label>
              <g:HorizontalPanel>
                <b:Controls>
                  <b:InputAddOn prependIcon="FILTER">
                    <b:TextBox ui:field="filter"></b:TextBox>
                  </b:InputAddOn>
                </b:Controls>
                <o:HelpImage imageSize="16" tooltipWidth="400px" addStyleNames="xsmall-indent">
                  <g:HTMLPanel>
                    <h4>Writing a Regular Expression Pattern</h4>
                    <p>A regular expression pattern is composed of simple characters, such as<code>abc</code>, or a
                      combination of simple and special characters, such as
                      <code>ab*c</code>
                      or<code>CANCER_\d+\.\d*</code>.
                    </p>

                    <div>
                      <h5>Using Simple Patterns</h5>
                      <p>Simple patterns are constructed of characters for which you want to find a direct match. For
                        example, the pattern
                        <code>abc</code>
                        matches character combinations in strings only when exactly the characters 'abc' occur together
                        and in that order. Such a match would succeed in the strings "Hi, do you know your abc's?" and
                        "The latest airplane designs evolved from slabcraft." In both cases the match is with the
                        substring 'abc'. There is no match in the string "Grab crab" because it does not contain the
                        substring 'abc'.
                      </p>
                    </div>

                    <div>
                      <h5>Using Special Characters</h5>
                      <p>When the search for a match requires something more than a direct match, such as finding one or
                        more b's, or finding white space, the pattern includes special characters. For example, the
                        pattern
                        <code>ab*c</code>
                        matches any character combination in which a single 'a' is followed by zero or more 'b's (
                        <code>*</code>
                        means 0 or more occurrences of the preceding item) and then immediately followed by 'c'. In the
                        string "cbbabbbbcdebc," the pattern matches the substring 'abbbbc'.
                      </p>
                      <p>The following table provides a complete list and description of the special characters that can
                        be used in regular expressions.
                      </p>

                      <h5>Special characters in regular expressions</h5>
                      <table class="table table-bordered table-striped">
                        <thead>
                          <tr>
                            <th>Character</th>
                            <th>Meaning</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>
                              <code>\</code>
                            </td>
                            <td>Either of the following:
                              <ul>
                                <li>For characters that are usually treated literally, indicates that the next character
                                  is special and not to be interpreted literally.
                                </li>
                                <li>For example,
                                  <code>b</code>
                                  matches the character 'b'. By placing a backslash in front of b, that is by using
                                  <code>\b</code>, the character becomes special to mean match a word boundary.
                                </li>
                                <li>For characters that are usually treated specially, indicates that the next character
                                  is not special and should be interpreted literally.
                                </li>
                                <li>For example,
                                  <code>*</code>
                                  is a special character that means 0 or more occurrences of the preceding item should
                                  be matched; for example,
                                  <code>a*</code>
                                  means match 0 or more a's. To match
                                  <code>*</code>
                                  literally, precede it with a backslash; for example,
                                  <code>a\*</code>
                                  matches 'a*'.
                                </li>
                                <li>Also do not forget to escape
                                  <code>\</code>
                                  itself since
                                  <code>\</code>
                                  is also an escape character in strings.
                                </li>
                              </ul>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>^</code>
                            </td>
                            <td>
                              <p>Matches beginning of input. If the multiline flag is set to true, also matches
                                immediately after a line break character.
                              </p>
                              <p>For example,
                                <code>^A</code>
                                does not match the 'A' in "an A", but does match the 'A' in "An E".
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>$</code>
                            </td>
                            <td>
                              <p>Matches end of input. If the multiline flag is set to true, also matches immediately
                                before a line break character.
                              </p>
                              <p>For example,
                                <code>t$</code>
                                does not match the 't' in "eater", but does match it in "eat".
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>*</code>
                            </td>
                            <td>
                              <p>Matches the preceding character 0 or more times.</p>
                              <p>For example,
                                <code>bo*</code>
                                matches 'boooo' in "A ghost booooed" and 'b' in "A bird warbled", but nothing in "A goat
                                grunted".
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>+</code>
                            </td>
                            <td>
                              <p>Matches the preceding character 1 or more times. Equivalent to {1,}.</p>
                              <p>For example,
                                <code>a+</code>
                                matches the 'a' in "candy" and all the a's in "caaaaaaandy".
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>?</code>
                            </td>
                            <td>
                              <p>Matches the preceding character 0 or 1 time. Equivalent to {0,1}.</p>
                              <p>For example,
                                <code>e?le?</code>
                                matches the 'el' in "angel" and the 'le' in "angle" and also the 'l' in "oslo".
                              </p>
                              <p>If used immediately after any of the quantifiers<code>*</code>,<code>+</code>,<code>
                                ?</code>, or<code>{}</code>, makes the quantifier non-greedy (matching the minimum
                                number of times), as opposed to the default, which is greedy (matching the maximum
                                number of times). For example, using /\d+/ non-global match "123abc" return "123", if
                                using /\d+?/, only "1" will be matched.
                              </p>
                              <p>Also used in lookahead assertions, described under x(?=y) and x(?!y) in this table.</p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>.</code>
                            </td>
                            <td>
                              <p>(The decimal point) matches any single character except the newline character.</p>
                              <p>For example,
                                <code>.n</code>
                                matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>(x)</code>
                            </td>
                            <td>
                              <p>Matches 'x' and remembers the match. These are called capturing parentheses.</p>
                              <p>For example,
                                <code>(foo)</code>
                                matches and remembers 'foo' in "foo bar." The matched substring can be recalled from the
                                resulting array's elements<code>[1]</code>, ...,<code>[n]</code>.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>(?:x)</code>
                            </td>
                            <td>Matches 'x' but does not remember the match. These are called non-capturing parentheses.
                              The matched substring can not be recalled from the resulting array's elements<code>
                                [1]</code>, ...,<code>[n]</code>.
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>x(?=y)</code>
                            </td>
                            <td>
                              <p>Matches 'x' only if 'x' is followed by 'y'.</p>
                              <p>For example,
                                <code>Jack(?=Sprat)</code>
                                matches 'Jack' only if it is followed by 'Sprat'.
                                <code>Jack(?=Sprat|Frost)</code>
                                matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat'
                                nor 'Frost' is part of the match results.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>x(?!y)</code>
                            </td>
                            <td>
                              <p>Matches 'x' only if 'x' is not followed by 'y'.</p>
                              <p>For example,
                                <code>\d+(?!\.)</code>
                                matches a number only if it is not followed by a decimal point. The regular expression
                                <code>\d+(?!\.)</code>
                                matches '141' but not '3.141'.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>x|y</code>
                            </td>
                            <td>
                              <p>Matches either 'x' or 'y'.</p>
                              <p>For example,
                                <code>green|red</code>
                                matches 'green' in "green apple" and 'red' in "red apple."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>{n}</code>
                            </td>
                            <td>
                              <p>Where
                                <code>n</code>
                                is a positive integer. Matches exactly
                                <code>n</code>
                                occurrences of the preceding character.
                              </p>
                              <p>For example,
                                <code>a{2 }</code>
                                doesn't match the 'a' in "candy," but it matches all of the a's in "caandy," and the
                                first two a's in "caaandy."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>{n,}</code>
                            </td>
                            <td>
                              <p>Where
                                <code>n</code>
                                is a positive integer. Matches at least
                                <code>n</code>
                                occurrences of the preceding character.
                              </p>
                              <p>For example,
                                <code>a{2,}</code>
                                doesn't match the 'a' in "candy", but matches all of the a's in "caandy" and in
                                "caaaaaaandy."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>{n,m}</code>
                            </td>
                            <td>
                              <p>Where
                                <code>n</code>
                                and
                                <code>m</code>
                                are positive integers. Matches at least
                                <code>n</code>
                                and at most
                                <code>m</code>
                                occurrences of the preceding character.
                              </p>
                              <p>For example,
                                <code>a{1,3}</code>
                                matches nothing in "cndy", the 'a' in "candy," the first two a's in "caandy," and the
                                first three a's in "caaaaaaandy" Notice that when matching "caaaaaaandy", the match is
                                "aaa", even though the original string had more a's in it.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>[xyz]</code>
                            </td>
                            <td>
                              <p>A character set. Matches any one of the enclosed characters. You can specify a range of
                                characters by using a hyphen.
                              </p>
                              <p>For example,
                                <code>[abcd]</code>
                                is the same as
                                <span style="font-family: monospace;">[</span>
                                <code>a-d]</code>. They match the 'b' in "brisket" and the 'c' in "city".
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>[^xyz]</code>
                            </td>
                            <td>
                              <p>A negated or complemented character set. That is, it matches anything that is not
                                enclosed in the brackets. You can specify a range of characters by using a hyphen.
                              </p>
                              <p>For example,
                                <code>[^abc]</code>
                                is the same as<code>[^a-c]</code>. They initially match 'r' in "brisket" and 'h' in
                                "chop."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>[\b]</code>
                            </td>
                            <td>Matches a backspace. (Not to be confused with<code>\b</code>.)
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\b</code>
                            </td>
                            <td>
                              <p>Matches a word boundary, such as a space, a newline character, punctuation character or
                                end of string. (Not to be confused with<code>[\b]</code>.)
                              </p>
                              <p>For example,
                                <code>\bn\w</code>
                                matches the 'no' in "noonday";
                                <code>\wy\b</code>
                                matches the 'ly' in "possibly, yesterday". Note that the "," is not included in the
                                match.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\B</code>
                            </td>
                            <td>
                              <p>Matches a non-word boundary.</p>
                              <p>For example,
                                <code>\w\Bn</code>
                                matches 'on' in "noonday", and
                                <code>y\B\w</code>
                                matches 'ye' in "possibly yesterday."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\c
                                <em>X</em>
                              </code>
                            </td>
                            <td>
                              <p>Where
                                <em>X</em>
                                is a control character. Matches a control character in a string.
                              </p>
                              <p>For example,
                                <code>\cM</code>
                                matches control-M in a string.
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\d</code>
                            </td>
                            <td>
                              <p>Matches a digit character. Equivalent to<code>[0-9]</code>.
                              </p>
                              <p>For example,
                                <code>\d</code>
                                or
                                <code>[0-9]</code>
                                matches '2' in "B2 is the suite number."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\D</code>
                            </td>
                            <td>
                              <p>Matches any non-digit character. Equivalent to<code>[^0-9]</code>.
                              </p>
                              <p>For example,
                                <code>\D</code>
                                or
                                <code>[^0-9]</code>
                                matches 'B' in "B2 is the suite number."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\f</code>
                            </td>
                            <td>Matches a form-feed.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\n</code>
                            </td>
                            <td>Matches a linefeed.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\r</code>
                            </td>
                            <td>Matches a carriage return.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\s</code>
                            </td>
                            <td>
                              <p>Matches a single white space character, including space, tab, form feed, line feed.</p>
                              <p>For example,
                                <code>\s\w*</code>
                                matches ' bar' in "foo bar."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\S</code>
                            </td>
                            <td>
                              <p>Matches a single character other than white space..</p>
                              <p>For example,
                                <code>\S\w*</code>
                                matches 'foo' in "foo bar."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\t</code>
                            </td>
                            <td>Matches a tab.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\v</code>
                            </td>
                            <td>Matches a vertical tab.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\w</code>
                            </td>
                            <td>
                              <p>Matches any alphanumeric character including the underscore. Equivalent to<code>
                                [A-Za-z0-9_]</code>.
                              </p>
                              <p>For example,
                                <code>\w</code>
                                matches 'a' in "apple," '5' in "$5.28," and '3' in "3D."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\W</code>
                            </td>
                            <td>
                              <p>Matches any non-word character. Equivalent to<code>[^A-Za-z0-9_]</code>.
                              </p>
                              <p>For example,
                                <code>\W</code>
                                or
                                <code>[^A-Za-z0-9_]</code>
                                matches '%' in "50%."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\
                                <em>n</em>
                              </code>
                            </td>
                            <td>
                              <p>Where
                                <em>n</em>
                                is a positive integer. A back reference to the last substring matching the
                                <em>n</em>
                                parenthetical in the regular expression (counting left parentheses).
                              </p>
                              <p>For example,
                                <code>apple(,)\sorange\1</code>
                                matches 'apple, orange,' in "apple, orange, cherry, peach."
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <code>\0</code>
                            </td>
                            <td>Matches a NUL character. Do not follow this with another digit.</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\xhh</code>
                            </td>
                            <td>Matches the character with the code hh (two hexadecimal digits)</td>
                          </tr>
                          <tr>
                            <td>
                              <code>\uhhhh</code>
                            </td>
                            <td>Matches the character with the code hhhh (four hexadecimal digits).</td>
                          </tr>
                        </tbody>
                      </table>

                    </div>
                  </g:HTMLPanel>
                </o:HelpImage>
              </g:HorizontalPanel>
            </g:FlowPanel>
          </g:customCell>
          <g:customCell styleName="top-aligned small-indent">
            <g:FlowPanel styleName="input block">
              <g:Label addStyleNames="key">
                <ui:msg description="Number of Visible Variables label">Number of visible variables</ui:msg>
              </g:Label>
              <o:NumericTextBox ui:field="visibleColumns" addStyleNames="span1"></o:NumericTextBox>
            </g:FlowPanel>
          </g:customCell>
          <g:customCell styleName="top-aligned small-indent">
            <g:FlowPanel styleName="input block">
              <g:Label addStyleNames="key">
                <ui:msg description="Number of Rows label">Number of rows</ui:msg>
              </g:Label>
              <o:NumericTextBox ui:field="pageSize" addStyleNames="span1"></o:NumericTextBox>
            </g:FlowPanel>
          </g:customCell>
        </g:row>
        <!--<g:row>-->
        <!--<g:customCell>-->
        <!--<g:Button styleName="btn small-bottom-margin btn-info iconb i-sync" ui:field="refreshButton">-->
        <!--<ui:msg description="Refresh label">Refresh</ui:msg>-->
        <!--</g:Button>-->
        <!--</g:customCell>-->
        <!--</g:row>-->
      </g:Grid>

    </g:DisclosurePanel>
    <c:SimplePager ui:field="pager" location="CENTER" addStyleNames="right-aligned"></c:SimplePager>
    <o:Table ui:field="valuesTable" addStyleNames="full-width left-aligned"></o:Table>
  </g:FlowPanel>

</ui:UiBinder>
