#! /usr/bin/env python
#
import argparse

import opal.rest
import opal.dictionary
import opal.data
import opal.file
import opal.entity
import opal.import_opal
import opal.import_csv
import opal.import_xml
import opal.import_spss
import opal.import_limesurvey
import opal.import_sql
import opal.import_vcf
import opal.import_ids
import opal.import_idsmap
import opal.export_xml
import opal.export_csv
import opal.export_sql
import opal.export_vcf
import opal.copy_table
import opal.delete_table
import opal.user
import opal.group
import opal.perm_project
import opal.perm_datasource
import opal.perm_table
import opal.perm_variable
import opal.perm_r
import opal.perm_datashield
import opal.perm_system
import opal.plugin
import opal.security.encrypt
import opal.security.decrypt
import opal.system


def add_opal_arguments(parser):
    """
    Add Opal access arguments
    """
    parser.add_argument('--opal', '-o', required=False, default='http://localhost:8080', help='Opal server base url (default: http://localhost:8080)')
    parser.add_argument('--user', '-u', required=False, help='User name')
    parser.add_argument('--password', '-p', required=False, help='User password')
    parser.add_argument('--ssl-cert', '-sc', required=False, help='Certificate (public key) file')
    parser.add_argument('--ssl-key', '-sk', required=False, help='Private key file')
    parser.add_argument('--verbose', '-v', action='store_true', help='Verbose output')


def add_subcommand(name, help, add_args_func, default_func):
    """
    Make a sub-parser, add default arguments to it, add sub-command arguments and set the sub-command callback function.
    """
    subparser = subparsers.add_parser(name, help=help)
    add_opal_arguments(subparser)
    add_args_func(subparser)
    subparser.set_defaults(func=default_func)


# Parse arguments
parser = argparse.ArgumentParser(description='Opal command line.')
subparsers = parser.add_subparsers(title='sub-commands',
                                   help='Available sub-commands. Use --help option on the sub-command '
                                        'for more details.')

# Add subcommands
add_subcommand('dict', 'Query for data dictionary.', opal.dictionary.add_arguments, opal.dictionary.do_command)
add_subcommand('data', 'Query for data.', opal.data.add_arguments, opal.data.do_command)
add_subcommand('entity', 'Query for entities (Participant, etc.).', opal.entity.add_arguments, opal.entity.do_command)
add_subcommand('file', 'Manage Opal file system.', opal.file.add_arguments, opal.file.do_command)
add_subcommand('import-opal', 'Import data from a remote Opal server.', opal.import_opal.add_arguments,
               opal.import_opal.do_command)
add_subcommand('import-csv', 'Import data from a CSV file.', opal.import_csv.add_arguments,
               opal.import_csv.do_command)
add_subcommand('import-xml', 'Import data from a ZIP file.', opal.import_xml.add_arguments,
               opal.import_xml.do_command)
add_subcommand('import-spss', 'Import data from a SPSS file.', opal.import_spss.add_arguments,
               opal.import_spss.do_command)
add_subcommand('import-limesurvey', 'Import data from a LimeSurvey database.', opal.import_limesurvey.add_arguments,
               opal.import_limesurvey.do_command)
add_subcommand('import-sql', 'Import data from a SQL database.', opal.import_sql.add_arguments,
               opal.import_sql.do_command)
add_subcommand('import-vcf', 'Import genotypes data from some VCF/BCF files.', opal.import_vcf.add_arguments,
               opal.import_vcf.do_command)
add_subcommand('import-ids', 'Import system identifiers.', opal.import_ids.add_arguments,
               opal.import_ids.do_command)
add_subcommand('import-ids-map', 'Import identifiers mappings.', opal.import_idsmap.add_arguments,
               opal.import_idsmap.do_command)
add_subcommand('export-xml', 'Export data to a zip of Opal XML files.', opal.export_xml.add_arguments,
               opal.export_xml.do_command)
add_subcommand('export-csv', 'Export data to a folder of CSV files.', opal.export_csv.add_arguments,
               opal.export_csv.do_command)
add_subcommand('export-sql', 'Export data to a SQL database.', opal.export_sql.add_arguments,
               opal.export_sql.do_command)
add_subcommand('export-vcf', 'Export genotypes data to VCF/BCF files.', opal.export_vcf.add_arguments,
               opal.export_vcf.do_command)
add_subcommand('copy-table', 'Copy a table into another table.', opal.copy_table.add_arguments, opal.copy_table.do_command)
add_subcommand('delete-table', 'Delete some tables.', opal.delete_table.add_arguments, opal.delete_table.do_command)
add_subcommand('user', 'Manage users.', opal.user.add_arguments, opal.user.do_command)
add_subcommand('group', 'Manage groups.', opal.group.add_arguments, opal.group.do_command)
add_subcommand('perm-project', 'Apply permission on a project.', opal.perm_project.add_arguments, opal.perm_project.do_command)
add_subcommand('perm-datasource', 'Apply permission on a datasource.', opal.perm_datasource.add_arguments, opal.perm_datasource.do_command)
add_subcommand('perm-table', 'Apply permission on a set of tables.', opal.perm_table.add_arguments, opal.perm_table.do_command)
add_subcommand('perm-variable', 'Apply permission on a set of variables.', opal.perm_variable.add_arguments, opal.perm_variable.do_command)
add_subcommand('perm-r', 'Apply R permission.', opal.perm_r.add_arguments, opal.perm_r.do_command)
add_subcommand('perm-datashield', 'Apply DataSHIELD permission.', opal.perm_datashield.add_arguments, opal.perm_datashield.do_command)
add_subcommand('perm-system', 'Apply system permission.', opal.perm_system.add_arguments, opal.perm_system.do_command)
add_subcommand('plugin', 'Manage system plugins', opal.plugin.add_arguments,
               opal.plugin.do_command)
add_subcommand('encrypt', "Encrypt string using Opal's secret key.", opal.security.encrypt.add_arguments,
               opal.security.encrypt.do_command)
add_subcommand('decrypt', "Decrypt string using Opal's secret key.", opal.security.decrypt.add_arguments,
               opal.security.decrypt.do_command)
add_subcommand('system', 'Query for system status and configuration', opal.system.add_arguments, opal.system.do_command)
add_subcommand('rest', 'Request directly the Opal REST API, for advanced users.', opal.rest.add_arguments,
               opal.rest.do_command)



# Execute selected command
args = parser.parse_args()
args.func(args)
