// This template overrides the normal gwt_overlay to handle enums differently (using their names as value)
// See http://jira.obiba.org/jira/browse/OPAL-337 for more details
// This template overrides 2 templates from the gwt_overlay file: enum_block (and related) and field_return_value
//
// Notes: in development mode, enums are internally represented as an array of one element (the enum's name) and in script mode, they are represented as a string.
// This is done so that methods that return enum instances don't throw a ClassCastException in development mode (because String does not extend JavaScriptObject).  
//
// enum_block:
//  Was overriden to use the enum name instead of its value (this is what java-format uses)
//  Also added a isXXX() method to compare enum instances
//
// field_return_value:
//   Was overriden to change the handling of the enum getter: it returns an array in development mode and a string in script mode.

group custom_gwt_overlay : gwt_overlay;

message_header(message, module, options) ::= <<
<header_text(prefix="// ", module=module)>

package <message.proto.javaPackageName>;

import com.google.gwt.core.client.*;
import org.obiba.opal.web.model.client.database.*;
import org.obiba.opal.web.model.client.magma.*;
import org.obiba.opal.web.model.client.math.*;
import org.obiba.opal.web.model.client.opal.*;
import org.obiba.opal.web.model.client.search.*;

>>

message_getters_and_setters(message, options) ::= <<
<message.nestedExtensions:extensions_static_definition(extension=it, options=options)>
<if(message.extensible)>
<message:extension_getters_and_setters(message=message, options=options)>

<endif>
// getters and setters
<message.fields:field_getters_and_setters(field=it, options=options)>
>>

extensions_static_definition(extension, options) ::= <<

public static final class <extension.extendedMessage.name>Extensions {
  <extension.fields:extension_field_static_definition(extension=extension, field=it, options=options)>
}

>>

extension_field_static_definition(extension, field, options) ::= <<

public static final int <field.name; format="UUC">_FIELD_NUMBER = <field.number>;
public static final String <field.name> = "<extension.parentMessage.proto.packageName>.<extension.parentMessage.name>.<field.name>";

>>

extension_getters_and_setters(message, options) ::= <<
public native final void setExtension(String name, JavaScriptObject ext) /*-{
  this[name] = ext;
}-*/;
public native final JavaScriptObject getExtension(String name) /*-{
  return this[name];
}-*/;
>>

enum_block(eg, module, options, nested) ::= <<
<if(!nested)>
<eg:enum_header(eg=it, module=module, options=options)>

<endif>
public <if(nested)>static <endif>final class <eg.name> extends JavaScriptObject {

    <eg.values:field_enum_value_declare(val=it, methodName="create"); separator="\n">

    <eg:enum_static_method_create(eg=it, options=options)>

    <eg:enum_constructor(eg=it, options=options)>

    <eg:enum_method_get_name(eg=it, options=options)>

    <eg:enum_method_is(eg=it, options=options)>

}

>>

field_enum_value_declare(val, methodName) ::= <<
public static final <val.enumGroup.name> <val.name> = <methodName>("<val.name>");
>>

enum_static_method_create(eg, options) ::= <<
private static native <eg.name> create(String name) /*-{
    return [name];
}-*/;
>>

enum_method_get_name(eg, options) ::= <<
public native String getName() /*-{
    return this[0];
}-*/;
>>

enum_method_is(eg, options) ::= <<
public native boolean is<eg.name>(<eg.name> rhs) /*-{
    return this[0] == rhs[0];
}-*/;
>>


field_return_value(field, options) ::= <<
<if(options.plain_overlay)>
return this["<field:field_name_or_number(field=field,options=options)>"];
<elseif(field.messageField)>
return this["<field:field_name_or_number(field=field,options=options)>"];
<elseif(field.bytesField)>
return this["<field:field_name_or_number(field=field,options=options)>"];
<elseif(field.stringField)>
<if(field.defaultValue)>
var v = this["<field:field_name_or_number(field=it,options=options)>"];
return v == null ? "<field.defaultValueAsString>" : v;

<else>
return this["<field:field_name_or_number(field=field,options=options)>"] || "";

<endif>
<elseif(field.enumField)>
return [ this["<field:field_name_or_number(field=it,options=options)>"] ];

<elseif(field.numberField)>
<if(field.defaultValue)>
var v = this["<field:field_name_or_number(field=it,options=options)>"];
return v == null ? <field.defaultValue> : v;

<else>
return this["<field:field_name_or_number(field=field,options=options)>"] || 0;

<endif>
<else>
<if(field.defaultValue)>
var v = this["<field:field_name_or_number(field=it,options=options)>"];
return v == null ? <field.defaultValue> : v;
<else>
return this["<field:field_name_or_number(field=field,options=options)>"] || false;
<endif>
<endif>
>>

field_getters_and_setters(field, options) ::= <<

// <field.name; format="CC">
<if(field.repeated)>

public native <map_repeated_prefix.(field.class.simpleName)><map_repeated_value.(field.javaType)><map_repeated_suffix.(field.class.simpleName)> get<field.name; format="PC">Array() /*-{
    <if(field.enumField)>
    <if(options.dev_mode)>
    return @<field.enumGroup.javaFullName>::getArray(Lcom/google/gwt/core/client/JavaScriptObject;Ljava/lang/String;)(this, "<field:field_name_or_number(field=field,options=options)>");
    <else>
    return this["<field:field_name_or_number(field=it,options=options)>"];
    <endif>
    <else>
    return this["<field:field_name_or_number(field=it,options=options)>"];
    <endif>
}-*/;

public native void set<field.name; format="PC">Array(<map_repeated_prefix.(field.class.simpleName)><map_repeated_value.(field.javaType)><map_repeated_suffix.(field.class.simpleName)> <var(val=field.name, fmt="CC", options=options)>) /*-{
    this["<field:field_name_or_number(field=it,options=options)>"] = <var(val=field.name, fmt="CC", options=options)>;
}-*/;

public native <map_repeated_prefix.(field.class.simpleName)><map_repeated_value.(field.javaType)><map_repeated_suffix.(field.class.simpleName)> clear<field.name; format="PC">Array() /*-{
    return (this["<field:field_name_or_number(field=it,options=options)>"] = []);
}-*/;
<if(options.generate_helper_methods)>

public native <map_singular_value.(field.javaType)> get<field.name; format="PC">(int index) /*-{
    var array = this["<field:field_name_or_number(field=it,options=options)>"];
    return array && array.length ? array[index] : null;
}-*/;

public native int get<field.name; format="PC">Count() /*-{
    var array = this["<field:field_name_or_number(field=it,options=options)>"];
    return array ? array.length : 0;
}-*/;

public native void add<field.name; format="PC">(<map_singular_value.(field.javaType)> <var(val=field.name, fmt="CC", options=options)>) /*-{
    var array = this["<field:field_name_or_number(field=it,options=options)>"];
    if (!array) {
        this["<field:field_name_or_number(field=it,options=options)>"] = array = [];
    }
    array.push(<var(val=field.name, fmt="CC", options=options)>);
}-*/;

<endif>
<else>

public native <map_singular_value.(field.javaType)> get<field.name; format="PC">() /*-{
    <field:field_return_value(field=it,options=options)>
}-*/;

public native void set<field.name; format="PC">(<map_singular_value.(field.javaType)> <var(val=field.name, fmt="CC", options=options)>) /*-{
   <if(field.enumField)>
    this["<field:field_name_or_number(field=it,options=options)>"] = <var(val=field.name, fmt="CC", options=options)>[0];
   <else>
    this["<field:field_name_or_number(field=it,options=options)>"] = <var(val=field.name, fmt="CC", options=options)>;
   <endif>
}-*/;

public native void clear<field.name; format="PC">() /*-{
    delete this["<field:field_name_or_number(field=it,options=options)>"];
}-*/;

public native boolean has<field.name; format="PC">() /*-{
    return this["<field:field_name_or_number(field=it,options=options)>"] != null;
}-*/;

<endif>
>>